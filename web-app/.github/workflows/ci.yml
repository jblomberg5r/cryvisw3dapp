# web-app/.github/workflows/ci.yml
name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-test-frontend:
    name: Build and Test Frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./web-app/apps/frontend # Adjusted to match your structure if repo root is one level up from web-app

    strategy:
      matrix:
        node-version: [18.x] # Specify Node.js versions

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: web-app/apps/frontend/package-lock.json # Path from repo root

      - name: Install Dependencies
        run: npm ci
        # If your monorepo setup requires installing from the root, adjust this:
        # working-directory: ./web-app
        # run: npm ci --workspace=apps/frontend
        # OR if using yarn/pnpm workspaces, use their commands from root.

      - name: Lint Check
        run: npm run lint

      - name: Type Check
        run: npm run check-types # Or your specific TypeScript check command (e.g., tsc --noEmit)

      # Placeholder for running unit tests.
      # Enable this when you have actual tests and a test runner configured in package.json.
      # - name: Run Unit Tests
      #   run: npm test -- --watchAll=false # or specific command like `npm test -- --coverage`
      #   env:
      #     CI: true
      #     # Add any other env vars your tests might need

      - name: Build Application
        run: npm run build
        env:
          VITE_WALLETCONNECT_PROJECT_ID: ${{ secrets.VITE_WALLETCONNECT_PROJECT_ID_STAGING || '' }} # Example for staging, use specific for prod
          # Add other build-time environment variables here

      - name: Archive Production Artifact
        if: success() # Only run if all previous steps were successful
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-artifacts
          path: web-app/apps/frontend/dist # Path from repo root

  # Placeholder for Backend CI Job (if you have a backend in the same monorepo)
  # build-and-test-backend:
  #   name: Build and Test Backend
  #   runs-on: ubuntu-latest
  #   needs: build-and-test-frontend # Optional: make it dependent or parallel
  #   defaults:
  #     run:
  #       working-directory: ./web-app/apps/backend
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Node.js (or other backend language)
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18' # Adjust as needed
  #         cache: 'npm' # Or yarn, pnpm
  #         cache-dependency-path: web-app/apps/backend/package-lock.json
  #     - name: Install Backend Dependencies
  #       run: npm ci
  #     - name: Run Backend Linter
  #       run: npm run lint # Adjust command
  #     - name: Run Backend Tests
  #       run: npm test # Adjust command
  #     - name: Build Backend (if applicable)
  #       run: npm run build # Adjust command
  #     - name: Archive Backend Artifact (if applicable)
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: backend-build-artifacts
  #         path: web-app/apps/backend/dist # Or relevant path

  # Placeholder for Deployment Job (example for Vercel, Netlify, S3, etc.)
  # This would typically run only on pushes to 'main' or after PR merge.
  # deploy-frontend:
  #   name: Deploy Frontend
  #   needs: build-and-test-frontend
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push' # Condition for deployment
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #     - name: Download Frontend Artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: frontend-build-artifacts
  #         path: web-app/apps/frontend/dist
  #     - name: Deploy to Vercel (Example)
  #       uses: amondnet/vercel-action@v20 # Or other deployment actions
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
  #         vercel-args: '--prod' # Deploy to production
  #         working-directory: ./web-app/apps/frontend # Ensure this is correct for the deployment tool
  #         alias-domains: # Optional: for custom domains on Vercel
  #           your-production-domain.com

# Note: Secrets like VERCEL_TOKEN, VITE_WALLETCONNECT_PROJECT_ID_STAGING etc.
# need to be configured in your GitHub repository's Settings > Secrets and variables > Actions.
